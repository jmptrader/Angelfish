using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;

using Angelfish.AfxSystem.A.Common.Plugins;
using Angelfish.AfxSystem.A.Common.Plugins.Metadata;

namespace Angelfish.AfxSystem.A.Common.Ui.Plugins.Metadata
{
    /// <summary>
    /// The view model for the plug-in catalog control, provides a view 
    /// of all the packages in the catalog and the component prototypes
    /// that are defined in each package.
    /// </summary>
    public class AfxComponentCatalogViewModel
    {
        public class PackageModel
        {
            public string Title { get; set; }

            public ObservableCollection<TemplateModel> Items { get; set; }
        }

        /// <summary>
        /// Provides the data context for the second level of the hierarchy
        /// in the tree control, which represents individual plug-ins that are
        /// defined in an instance of a plug-in assembly.
        /// </summary>
        public class TemplateModel
        {
            public Guid Id { get; set; }

            public string Name { get; set; }

            public BitmapImage Image { get; set; }
        }

        /// <summary>
        /// Provides the items source for the first level of the
        /// hierarchy that is displayed in the tree control.
        /// </summary>
        public ObservableCollection<PackageModel> Items
        {
            get { return _items; }
        }

        /// <summary>
        /// The collection of plug-in package definitions that has
        /// been generated by enumerating over all of the packages
        /// that are declared in the system's plug-in catalog.
        /// </summary>
        private ObservableCollection<PackageModel> _items =
            new ObservableCollection<PackageModel>();

        /// <summary>
        /// Constructs a new instance of the view model for the
        /// component catalog, which will be assigned to an instance
        /// of the plug-in catalog user control.
        /// </summary>
        /// <param name="catalog"></param>
        public AfxComponentCatalogViewModel(IAfxComponentCatalog catalog)
        {
            foreach (var package in catalog)
            {
                var packageModel = new PackageModel()
                {
                    Title = package.Title,
                    Items = new ObservableCollection<TemplateModel>()
                };

                foreach (var template in package)
                {
                    var templateModel = new TemplateModel()
                    {
                        Id = template.Id,
                        Name = template.Name,
                        Image = GetComponentBitmap(template, catalog)
                    };

                    packageModel.Items.Add(templateModel);
                }

                this._items.Add(packageModel);
            }
        }

        private BitmapImage GetComponentBitmap(AfxComponentTemplate template, IAfxComponentCatalog catalog)
        {
            var resolver = catalog.GetComponentResolver(template.Resolver);
            if (resolver != null)
            {
                return resolver.GetProperty(template.Id, "Component.Bitmap") as BitmapImage;
            }

            return null;
        }

    }
}
